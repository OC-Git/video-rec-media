<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
        width="640" height="480" layout="absolute"
        creationComplete="application1_creationCompleteHandler(event)">

	    <mx:Style>
	    	#box {
	    		background-color: #000000;
	    	}
	    	#bandwidth {
	    		color: #ffffff;
	    	}
	    	.big {
				font-size: 150px;
				color: #FFFFFF;
	    	}
			.button {
				-moz-box-shadow:inset 0px 0px 0px 0px #ffffff;
				-webkit-box-shadow:inset 0px 0px 0px 0px #ffffff;
				box-shadow:inset 0px 0px 0px 0px #ffffff;
				background-color:#ededed;
				-moz-border-radius:6px;
				-webkit-border-radius:6px;
				border-radius:6px;
				border:1px solid #dcdcdc;
				display:inline-block;
				color:#787878;
				font-family:arial;
				font-size:16px;
				padding:6px 24px;
				height: 30px;
				width: 400px;
				text-decoration:none;
				text-shadow:1px 1px 0px #ffffff;
			}
			.button:hover {
				background-color:#dfdfdf;
			}
			.button:active {
				position:relative;
				top:1px;
			}	    	
	    </mx:Style>

        <mx:Script>
                <![CDATA[
	                    import mx.core.UIComponent;
						import mx.core.FlexGlobals;
                        import mx.events.FlexEvent;
						import mx.events.CloseEvent;
                        import mx.controls.Alert;
                        import flash.external.*;
                        import mx.managers.PopUpManager;
  						import mx.containers.Panel;
  						
                        private var connection:NetConnection;
                        private var video:Video;
                        private var stream:NetStream;
                        private var camera:Camera;
						private var mic:Microphone;
         				private var t:Timer;
         				                        
						private var param:Object;
						private var recording:Boolean;
						private var seconds:int=0;
						private var secondsMax:int=60;

						private var startRecord:Canvas;
						private var countdown:int;
						private var countdownLabel:Label;
						private var countdownTimer:Timer;
						private var stopRecord:Canvas;


                        protected function application1_creationCompleteHandler(event:FlexEvent):void
                        {
							param = FlexGlobals.topLevelApplication.parameters;
							recording = false;
							
                            connection = new NetConnection();
                            connection.connect(param.rtmp,
                              param.name, 
                              param.client, param.page, param.title, param.category, 
                              param.description, param.key);
                            connection.addEventListener(NetStatusEvent.NET_STATUS, onConnected);

			                t = new Timer(1000);
			                t.addEventListener(TimerEvent.TIMER, updateTimer);
			                t.start();
                        }
                        
                        private function onConnected(event:NetStatusEvent) : void {
			                switch( event.info.code ) {
			                    case "NetConnection.Connect.Success":
			                        connectionSuccess();
			                    break;
			                    case "NetConnection.Connect.Failed":
			                        connectionFailed("Verbindung nicht erfolgreich");
			                    break;
			                    case "NetConnection.Connect.Rejected":
			                        connectionFailed("Verbindung nicht erlaubt");
			                    break;
			                    default:
			                        trace( "netStatusHandler:code: " + event.info.code );
			                    break;
			                }
						}

						private function connectionSuccess():void {
                            video = new Video(320, 240);
                            
                            // create camera
                            camera = Camera.getCamera();
							camera.setMode(param.width, param.height, param.fps);
                            camera.setQuality(param.bandwidth, param.quality);

							mic = Microphone.getMicrophone();
                            
                            // create the netstream
                            stream = new NetStream(connection);
                        	stream.addEventListener(NetStatusEvent.NET_STATUS, onPublishStream);
                            stream.attachCamera(camera);
							stream.attachAudio(mic);
                            stream.publish(param.name);

                            video.attachCamera(camera);
							                                
                            // wrap video
                            var ui:UIComponent = new UIComponent();
                            ui.addChild(video);
                            ui.move(0,0);
                            vid.addChild(ui);
                        }

                        private function onConsumeStream(event:NetStatusEvent) : void {
                        	if (event.info.code=="NetStream.Play.Stop") {
								PopUpManager.addPopUp(stopRecord,this,true);
								PopUpManager.centerPopUp(stopRecord); 
                        	}
						}

                        private function onPublishStream(event:NetStatusEvent) : void {
			                switch( event.info.code ) {
			                    case "NetStream.Failed":
			                        connectionFailed("Ihr Ticket ist nicht gültig.");
			                    break;
			                    default:
			                        trace( "netStatusHandler:code: " + event.info.code );
			                    break;
			                }
						}


						private function connectionFailed(s:String):void {
							Alert.show(s, "Fehler", Alert.OK);
						}
			
			            private function updateTimer(evt:TimerEvent):void {
			            	var txt:String = "";

			            	if (stream!=null)
			            		txt += String(int(stream.info.currentBytesPerSecond/1024)+" KB/s");
			            		
			                if (recording) {
			                	progress.setProgress(seconds,secondsMax);
			                	seconds++;
				                if (seconds>secondsMax)
				                	recordClicked();
			                }
			                bandwidth.text = txt;
			            }
			            
						private function recordClicked():void {
							if (recording) {
								connection.call("streamManager.stopRecordingShow", null);	
			                	progress.setProgress(0,100);
			                	seconds = 0;
								recordButton.label = "Aufnahme";
								stopRecord = new Canvas();
								stopRecord.width = 240;
                				stopRecord.height = 180;
								stopRecord.setStyle("backgroundAlpha", 0.1);
								var preview:Button = new Button();
								preview.label = "Aufnahme ansehen?";
								preview.left = 0;
								preview.top = 0;
								preview.styleName = "button";
								preview.addEventListener(MouseEvent.CLICK, previewClicked);
								stopRecord.addChild(preview);
								var rerecord:Button = new Button();
								rerecord.label = "Neue Aufnahme?";
								rerecord.left = 0;
								rerecord.top = 30;
								rerecord.styleName = "button";
								rerecord.addEventListener(MouseEvent.CLICK, rerecordClicked);
								stopRecord.addChild(rerecord);
								var publish:Button = new Button();
								publish.label = "Aufnahme veröffentlichen?";
								publish.left = 0;
								publish.top = 60;
								publish.styleName = "button";
								publish.addEventListener(MouseEvent.CLICK, publishClicked);
								stopRecord.addChild(publish);
								PopUpManager.addPopUp(stopRecord,this,true);
								PopUpManager.centerPopUp(stopRecord); 
							} else {
								countdown = 3;
								startRecord = new Canvas();
								startRecord.width = 400;
                				startRecord.height = 250;
								startRecord.setStyle("backgroundAlpha", 0.1);
								countdownLabel = new Label();
								countdownLabel.styleName = "big";
								countdownLabel.text = "3";
								countdownLabel.left = 120;
								countdownLabel.top = 0;
								startRecord.addChild(countdownLabel);
								PopUpManager.addPopUp(startRecord,this,true);
								PopUpManager.centerPopUp(startRecord); 
				                countdownTimer = new Timer(1000);
				                countdownTimer.addEventListener(TimerEvent.TIMER, countdownListener);
				                countdownTimer.start();
							}
							recording = !recording;
						}
						
						private function rerecordClicked(event:Event):void {
    				        connection.call("streamManager.deleteRecording", null);
							PopUpManager.removePopUp(stopRecord);
                            // create the netstream
                            stream = new NetStream(connection);
                        	stream.addEventListener(NetStatusEvent.NET_STATUS, onPublishStream);
                            stream.attachCamera(camera);
							stream.attachAudio(mic);
                            stream.publish(param.name);

                            video.attachCamera(camera);
							recordClicked(); 
						}
						
						private function previewClicked(event:Event):void {
							PopUpManager.removePopUp(stopRecord);
                            stream = new NetStream(connection);
                        	stream.addEventListener(NetStatusEvent.NET_STATUS, onConsumeStream);
                        	stream.play(param.name);
                        	video.attachNetStream(stream);
						}
						
						private function publishClicked(event:Event):void {
  				            var responder:Responder = new Responder(publishComplete, publishFail);
				            connection.call("streamManager.publishRecording", responder);
							PopUpManager.removePopUp(stopRecord);
						}
						
			            private function countdownListener(evt:TimerEvent):void {
			            	countdown = countdown-1;
			            	if (countdown==0) {
			            		countdownTimer.stop();
								recordButton.label = "Beenden";
								PopUpManager.removePopUp(startRecord); 
								connection.call("streamManager.recordShow", null);
			            	} else {
				            	countdownLabel.text = ""+countdown;
				            }
				        }
						
						private function closeHandler(event:CloseEvent):void
					      {
					        if (event.detail == Alert.YES)
					        {
					          var responder:Responder = new Responder(publishComplete, publishFail);
					          connection.call("streamManager.publishRecording", responder);
					        }
					        else
					        {
					          connection.call("streamManager.deleteRecording", null);
							  ExternalInterface.call("publishCancelled");
					        }
					      }    

						private function publishComplete(results:Object):void {
							if (!ExternalInterface.available)
								Alert.show("Wrapper not there", "Sorry", Alert.OK);
							
							ExternalInterface.call("publishComplete");
				        }
				        
				        private function publishFail(results:Object):void {
							Alert.show("Veröffentlichung gescheitert.", "Sorry", Alert.OK);
				        }
        
						
                ]]>
        </mx:Script>
        <mx:Box x="0" y="0" width="100%" height="100%" verticalGap="0">
	        <mx:Canvas id="vid" x="0" y="0" width="320" height="240"/>
	        <mx:HBox id="box" width="100%" height="26"
		        paddingTop="3" 
		        paddingBottom="3" 
		        paddingLeft="10" 
		        paddingRight="10">
	        	<mx:Button id="recordButton" toggle="true"
	        		label="Aufnahme"
	        		click="recordClicked()"
	        	/>
				<mx:ProgressBar width="150" mode="manual" minimum="0" maximum="100" id="progress"/>
		        <mx:Label x="2" y="2" text="" id="bandwidth"/>
		    </mx:HBox> 
	    </mx:Box> 
</mx:Application>
