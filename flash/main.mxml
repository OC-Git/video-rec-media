<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
        width="640" height="480" layout="absolute"
        backgroundAlpha="0"
        creationComplete="creationCompleteHandler(event)">

	    <mx:Style>
	    	#box {
	    		background-color: #000000;
	    	}
	    	#bandwidth {
	    		color: #ffffff;
	    	}
	    	.big {
				font-size: 120px;
				color: #FFFFFF;
	    	}
	    	.msg {
				font-size: 16px;
				color: #444444;
	    	}
	    </mx:Style>

        <mx:Script>
                <![CDATA[
	                    import mx.core.UIComponent;
						import mx.core.FlexGlobals;
                        import mx.events.FlexEvent;
						import mx.events.CloseEvent;
                        import mx.controls.Alert;
                        import mx.managers.PopUpManager;
  						import mx.containers.Panel;
                        import flash.external.*;
                        import flash.events.DataEvent;
                        import flash.events.ProgressEvent;
	                    import flash.net.FileReference;
  						
                        private var connection:NetConnection;
                        private var video:Video;
                        private var stream:NetStream;
                        private var camera:Camera;
						private var mic:Microphone;
         				private var t:Timer;
         				                        
						private var param:Object;
						private var recording:Boolean;
						private var seconds:int=0;
						private var secondsMax:int=60;

						private var countdownCanvas:Canvas;
						private var countdown:int;
						private var countdownLabel:Label;
						private var countdownTimer:Timer;
						private var startRecord:Canvas;
						private var stopRecord:Canvas;
						private var stopRecordLabel:Label;
						private var uploadLabel:Label;

         				private var bufferTimer:Timer;
         				private var maxBufferLength:int;
						private var bufferCanvas:Canvas;

						private var file:FileReference;

                        protected function creationCompleteHandler(event:FlexEvent):void
                        {
							param = FlexGlobals.topLevelApplication.parameters;
							recording = false;

                        }
                        
						public function record():void {
							stack.selectedChild = cam;
							connect();
						}							
						
                        private function connect() : void {
                        	if (connection!=null) {
                        		startRecording();
                        		return;
                        	}
                            connection = new NetConnection();
                            connection.client = this;
                            connection.addEventListener(NetStatusEvent.NET_STATUS, onConnected);
                            connection.connect(param.rtmp,
                              param.name, 
                              param.client, param.page, param.title, param.category, 
                              param.description, param.key);
                        }
                        
                        private function onConnected(event:NetStatusEvent) : void {
			                switch( event.info.code ) {
			                    case "NetConnection.Connect.Success":
			                        startRecording();
			                    break;
			                    case "NetConnection.Connect.Failed":
			                        connectionFailed("Verbindung nicht erfolgreich");
			                    break;
			                    case "NetConnection.Connect.Rejected":
			                        connectionFailed("Verbindung nicht erlaubt");
			                    break;
			                    default:
			                        connectionFailed("Unbekannter Verbindungsfehler: " + event.info.code );
			                    break;
			                }
						}

						private function connectionFailed(s:String):void {
							Alert.show(s, "Fehler", Alert.OK);
						}
			
			            private function createCanvas():Canvas {
							var cvs:Canvas = new Canvas();
							cvs.width = 250;
            				cvs.height = 220;
							cvs.setStyle("backgroundAlpha", 0.8);
							return cvs;
						}			            
			            private function createButton(cvs:Canvas, y:int, label:String, clicked:Function):Button {
							var button:Button = new Button();
							button.label = label;
							button.left = 0;
							button.top = y;
							button.percentWidth = 100;
							button.styleName = "button";
							button.addEventListener(MouseEvent.CLICK, clicked);
							cvs.addChild(button);
							return button;
			            }
			            private function createLabel(cvs:Canvas, x:int, y:int, msg:String):Label {
							var label:Label = new Label();
							label.text = msg;
							label.left = x;
							label.top = y;
							cvs.addChild(label);
							return label
			            }

						private function createCam():void {
							if (camera!=null) {
								camIsOn();
								return;
							}
                            // create camera
                            camera = Camera.getCamera();
                            camera.addEventListener(StatusEvent.STATUS, cameraStatusHandler);
							camera.setMode(param.width, param.height, param.fps);
                            camera.setQuality(param.bandwidth, param.quality);

							mic = Microphone.getMicrophone();
						}							

						private function cameraStatusHandler(event:StatusEvent):void
						{
						    switch (event.code)
						    {
						        case "Camera.Muted":
						            trace("User clicked Deny.");
						            break;
						        case "Camera.Unmuted":
						            camIsOn();
						            break;
						    }
						}						
						private function createStream():void {
							if (stream!=null)
								return;
                            // create the netstream
                            stream = new NetStream(connection);
                            stream.client = this;
                        	stream.addEventListener(NetStatusEvent.NET_STATUS, onPublishStream);
							stream.publish(param.name);
						}			


                        private function onPublishStream(event:NetStatusEvent) : void {
			                switch( event.info.code ) {
			                    case "NetStream.Failed":
			                        connectionFailed("Ihr Ticket ist nicht gÃ¼ltig.");
			                    break;
			                    default:
			                        trace( "netStatusHandler:code: " + event.info.code );
			                    break;
			                }
						}

						public function onMetaData(infoObject:Object):void {
						}
						 
						public function onCuePoint(infoObject:Object):void {
						}		
														
						public function onBWDone(...rest):void
						{
						    var p_bw:Number;
						    if (rest.length > 0){
						        p_bw = rest[0];
						    }
						    trace("bandwidth = " + p_bw + " Kbps.");
						}
						
						private function createVideo():void {
                            video = new Video(320, 240);
                            var ui:UIComponent = new UIComponent();
                            ui.addChild(video);
                            ui.move(0,0);
                            vid.addChild(ui);
						}
						
						private function startRecording():void {
							createStream();
							createCam();
							createVideo();
                        	video.attachNetStream(null);
                            video.attachCamera(camera);
						}
						
						private function camIsOn():void {
							startCountdown();	
						}							

						private function startCountdown():void {
							countdown = 6;
							countdownCanvas = createCanvas();
							countdownLabel = createLabel(countdownCanvas, 90, 20, "")
							countdownLabel.styleName = "big";
							PopUpManager.addPopUp(countdownCanvas,this,true);
							PopUpManager.centerPopUp(countdownCanvas); 
			                countdownTimer = new Timer(1000);
			                countdownTimer.addEventListener(TimerEvent.TIMER, countdownListener);
			                countdownTimer.start();
						}
						
			            private function countdownListener(evt:TimerEvent):void {
			            	countdown = countdown-1;
			            	if (countdown==0) {
			            		countdownTimer.stop();
								PopUpManager.removePopUp(countdownCanvas); 
	                            // stream.bufferTime = 60;
	                            stream.attachCamera(camera);
								stream.attachAudio(mic);
								// connection.call("streamManager.recordShow", null);
								startTimer();
			            	} else {
				            	countdownLabel.text = ""+countdown;
				            }
				        }

                        private function startTimer() : void {
                        	seconds = 0;
			                t = new Timer(1000);
			                t.addEventListener(TimerEvent.TIMER, updateTimer);
			                t.start();
                        }

			            private function updateTimer(evt:TimerEvent):void {
			            	if (stream==null)
			            		return;
			            
			            	var txt:String = "";

			            	if (stream!=null)
			            		txt += String(int(stream.info.currentBytesPerSecond/1024)+" KB/s");
			            		
		                	progress.setProgress(seconds,secondsMax);
		                	seconds++;
			                if (seconds>secondsMax)
			                	stop();
			                bandwidth.text = txt;
			            }

						private function stop():void {
							stream.pause();
                            stream.attachCamera(null);
							stream.attachAudio(null);
							maxBufferLength = stream.bufferLength;
							stack.selectedChild = prog;
							stack.validateNow();
							progLabel.text = "Speichern..."; 
							progBar.setProgress(0, maxBufferLength);
			                bufferTimer = new Timer(1000);
			                bufferTimer.addEventListener(TimerEvent.TIMER, handleBufferCheck);
			                bufferTimer.start();
			            }

						private function handleBufferCheck(e:TimerEvent):void {
							progBar.setProgress(maxBufferLength-stream.bufferLength, maxBufferLength);
							if (stream.bufferLength==0) {
								bufferTimer.reset();
								t.reset();
								// connection.call("streamManager.stopRecordingShow", null);	
			                	progress.setProgress(0,100);
			                	seconds = 0;
								playButton.enabled = true;
								publishButton.enabled = true;
								stack.selectedChild = dialog;
								stream.close();
							}
						}
						
						private function previewClicked(event:Event):void {
							stack.selectedChild = cam;
							
                            stream = new NetStream(connection);
                        	stream.addEventListener(NetStatusEvent.NET_STATUS, onConsumeStream);
                        	stream.play(param.name);

                            video.attachCamera(null);
                        	video.attachNetStream(stream);
						}

                        private function onConsumeStream(event:NetStatusEvent) : void {
                        	if (event.info.code=="NetStream.Play.Stop") {
								stack.selectedChild = dialog;
								stream = null;
                        	}
						}

						
						private function publishClicked(event:Event):void {
  				            var responder:Responder = new Responder(publishComplete, publishFail);
				            connection.call("streamManager.publishRecording", responder);
							stack.selectedChild = prog;
				            progLabel.text = "VerÃ¶ffentlichung lÃ¤uft, einen Moment bitte...";
							progBar.indeterminate = true;
						}
						
						private function closeHandler(event:CloseEvent):void
					      {
					        if (event.detail == Alert.YES)
					        {
					          var responder:Responder = new Responder(publishComplete, publishFail);
					          connection.call("streamManager.publishRecording", responder);
					        }
					        else
					        {
					          connection.call("streamManager.deleteRecording", null);
					        }
					      }    

						private function publishComplete(results:Object):void {
			                progLabel.text = "Video verÃ¶ffentlicht!";
				        }
				        
				        private function publishFail(results:Object):void {
							Alert.show("VerÃ¶ffentlichung gescheitert.", "Sorry", Alert.OK);
				        }
        				public function doUploadClicked(event:Event):void {
							PopUpManager.removePopUp(stopRecord);
							uploadClicked();
						}
						public function uploadClicked():void {
							file = new FileReference();
							file.addEventListener(Event.SELECT, fileSelected);
							file.addEventListener(Event.COMPLETE, fileLoaded );
							file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, fileUploaded);
							file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
							file.browse([]);
						}
						private function securityErrorHandler(event:Event):void {
					        var file:FileReference = FileReference(event.target);
					        Alert.show("securityErrorHandler: name=" + file.name + " event=" + event.toString(), "Sorry", Alert.OK);
						}						
						public function fileSelected(event:Event):void {
							stack.selectedChild = prog;
							stack.validateNow();
				            progLabel.text = "Lade Video hoch...";
							
							var dest:URLRequest = new URLRequest(param.upload);
							var params:URLVariables = new URLVariables();
							params.title = param.title;
							params.page = param.page;
							params.key = param.key;
							params.category = param.category;
							params.description = param.description;
							
							dest.method = URLRequestMethod.POST;
							dest.data = params;
							file.addEventListener(ProgressEvent.PROGRESS, fileProgress);
							file.addEventListener(IOErrorEvent.IO_ERROR, uploadError);
							file.upload(dest, "file");
						}
						public function fileLoaded(event:Event):void {
							file.load();				
						}
						public function fileProgress(event:ProgressEvent):void {
		                	progBar.setProgress(event.bytesLoaded,event.bytesTotal);
		                	if (event.bytesLoaded==event.bytesTotal) {
			                	progLabel.text = "VerÃ¶ffentliche Video...";
							}
						}
						public function uploadError(event:IOErrorEvent):void {
							Alert.show(event.text, "Sorry", Alert.OK);
						}
						public function fileUploaded(event:DataEvent):void {
							file.removeEventListener( ProgressEvent.PROGRESS, fileProgress );
			                progLabel.text = "Video verÃ¶ffentlicht!";
						}
                ]]>
        </mx:Script>
        <mx:ViewStack id="stack" width="100%" height="100%">
        	<mx:Grid id="dialog" width="100%" height="100%">
                <mx:GridRow>
                    <mx:GridItem>
                        <mx:Button id="recordButton" label="Aufnahme" width="156"
                        		icon="@Embed(source='assets/record_icon.png')" 
                        		labelPlacement="bottom"
                        		click="record();"/>
                    </mx:GridItem>
                    <mx:GridItem>
                        <mx:Button id="playButton" label="Wiedergabe" width="156" enabled="false"
                        		icon="@Embed(source='assets/play_icon.png')" 
                        		labelPlacement="bottom"
                        		click="previewClicked(event);"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow >
                    <mx:GridItem>
                        <mx:Button id="uploadButton" label="Hochladen" width="100%"
                        		icon="@Embed(source='assets/upload_icon.png')" 
                        		labelPlacement="bottom"
                        		click="uploadClicked();"/>
                    </mx:GridItem>
                    <mx:GridItem>
                        <mx:Button id="publishButton" label="Freigeben" width="100%" enabled="false"
                        		icon="@Embed(source='assets/publish_icon.png')" 
                        		labelPlacement="bottom"
                        		click="publishClicked(event);"/>
                        		
                    </mx:GridItem>
                </mx:GridRow>
        	</mx:Grid> 
	        <mx:Canvas id="prog" x="0" y="0" width="100%" height="100%"
	        	horizontalCenter="0" verticalCenter="0">
		        <mx:Label x="50" y="50" text="" id="progLabel"/>
				<mx:ProgressBar x="50" y="200" width="200" mode="manual" label=""
				    minimum="0" maximum="100" id="progBar"/>
		    </mx:Canvas> 
	        <mx:Box id="cam" x="0" y="0" width="100%" height="100%" verticalGap="0">
		        <mx:Canvas id="vid" x="0" y="0" width="320" height="240" click="stop();"/>
		        <mx:HBox id="box" width="100%" height="26"
			        paddingTop="3" 
			        paddingBottom="3" 
			        paddingLeft="10" 
			        paddingRight="10">
					<mx:ProgressBar width="200" mode="manual" label=""
					    minimum="0" maximum="100" id="progress"/>
			        <mx:Label x="2" y="2" text="" id="bandwidth"/>
			    </mx:HBox> 
		    </mx:Box> 
		  </mx:ViewStack>
</mx:Application>
